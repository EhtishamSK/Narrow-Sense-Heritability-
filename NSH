# Set the working directory
# Update this path if the file location changes in the future
setwd("C:/Users/ehtis/OneDrive - New Mexico State University/SUNNY/Research Projects/Mechanical Harvest Paper/Phenotype manuscript/single location/NSH")
getwd()  # Verify the current working directory

# Load the HapMap formatted GBS data, skipping the first 10 lines that contain metadata
# This is because my GBS file is in HamMap format which includes non-genotypic header lines.
hapmap_data <- read.table("GBS_PANEL_DIPLOID_75G.hmp.txt", header = FALSE, skip = 10)

# Preview the structure of the loaded data to ensure it's loaded correctly
head(hapmap_data)
str(hapmap_data)

# Load necessary library for data manipulation
library(dplyr)

# Extract the SNP genotype data starting from the 12th column (based on HapMap format)
# Columns before V12 contain marker metadata (chromosome, position, etc.)
genotype_data <- hapmap_data[, 12:ncol(hapmap_data)]
str(genotype_data)  # Check the structure of the extracted genotype data

# Conversion of genotype calls to numerical format:
# AA = 0 (homozygous reference)
# AG/GA = 1 (heterozygous)
# GG = 2 (homozygous alternate)
# Missing data (NAs) are retained as NA

# Define the conversion function
convert_genotype <- function(genotype) {
  if (is.na(genotype)) {
    return(NA)  # Keep missing data as NA
  } else if (genotype == "AA") {
    return(0)
  } else if (genotype == "AG" | genotype == "GA") {
    return(1)
  } else if (genotype == "GG") {
    return(2)
  } else {
    return(NA)  # Handle unrecognized genotypes
  }
}

# Apply the conversion to the entire genotype dataset
numeric_genotypes <- apply(genotype_data, MARGIN = c(1, 2), FUN = convert_genotype)

# Transpose the numeric genotypes for GRM calculation (genotypes as rows, SNPs as columns)
numeric_genotypes <- t(numeric_genotypes)

# Load the necessary library for GRM calculation
library(rrBLUP)

# Calculate the Additive Relationship Matrix (GRM)
G <- A.mat(numeric_genotypes, return.impute = TRUE)
str(G)  # Check the structure of the GRM
str(G$A)  # Check the structure of the matrix inside GRM

# Optionally, calculate Dominance Relationship Matrix (D) and Epistatic Matrix (E)
D <- D.mat(numeric_genotypes, return.imputed = TRUE)  # Dominance matrix
str(D)
str(D$D)

E <- E.mat(numeric_genotypes)  # Epistatic matrix

# Extract genotype names from the GRM
geno_names_grm <- rownames(G$A)

# Import the phenotypic data
pheno <- read.csv("mydata75.csv")
str(pheno)  # Check the structure of the phenotypic data
pheno$geno <- as.factor(pheno$geno)  # Ensure the genotype column is treated as a factor

# Extract genotype names from the phenotypic data
geno_names_pheno <- pheno$geno

# Check if genotype names in GRM and phenotypic data match (should return TRUE)
all(geno_names_pheno == geno_names_grm)

# If needed, reorder the phenotypic data to match the order of GRM (optional, only if the names don't match)
# pheno <- pheno[match(geno_names_grm, pheno$geno), ]

# Load necessary libraries for mixed model analysis
library(Matrix)
library(MASS)
library(crayon)
library(sommer)

# Fit a mixed model using the GRM for additive effects on a single trait (ARA)
model_A <- mmer(fixed = ARA ~ 1,  # Fixed effect for the trait
                random = ~ vsr(geno, Gu = G$A),  # Random effect using the GRM (Additive variance)
                rcov = ~ units,  # Residual variance
                data = pheno)  # Phenotypic data

# Summary of the fitted model
summary(model_A)

# Extract variance components manually from the sommer model
varcomp_sommer <- summary(model_A)$varcomp

# Extract additive genetic variance (σA) and residual variance (σe)
sigma_A <- varcomp_sommer["u:geno.ARA-ARA", "VarComp"]   # Additive genetic variance
sigma_e <- varcomp_sommer["units.ARA-ARA", "VarComp"]    # Residual variance

# Calculate narrow-sense heritability for trait ARA
h2_ARA <- sigma_A / (sigma_A + sigma_e)

# Print the calculated heritability
h2_ARA

# Function to calculate heritability for any given trait
calculate_heritability <- function(trait, data, G) {
  model <- mmer(fixed = as.formula(paste(trait, "~ 1")),
                random = ~ vsr(geno, Gu = G$A),
                rcov = ~ units,
                data = data)
  
  varcomp <- summary(model)$varcomp
  
  sigma_A <- varcomp[paste0("u:geno.", trait, "-", trait), "VarComp"]
  sigma_e <- varcomp[paste0("units.", trait, "-", trait), "VarComp"]
  
  h2 <- sigma_A / (sigma_A + sigma_e)
  
  return(c(trait = trait, additive_variance = sigma_A, residual_variance = sigma_e, heritability = h2))
}

# Loop over all traits in the phenotypic dataset and calculate heritability
trait_names <- colnames(pheno)[2:21]  # Select all traits except 'geno'
results <- data.frame(trait = character(),
                      additive_variance = numeric(),
                      residual_variance = numeric(),
                      heritability = numeric(), stringsAsFactors = FALSE)

for (trait in trait_names) {
  result <- calculate_heritability(trait, pheno, G)
  results <- rbind(results, as.data.frame(t(result)))
}

# Correct column names for the results
colnames(results) <- c("Trait", "Additive_Variance", "Residual_Variance", "Heritability")

# Convert numeric columns for proper formatting
results$Additive_Variance <- as.numeric(as.character(results$Additive_Variance))
results$Residual_Variance <- as.numeric(as.character(results$Residual_Variance))
results$Heritability <- as.numeric(as.character(results$Heritability))

# Save the results to a CSV file for future reference
write.csv(results, "heritability_results.csv", row.names = FALSE)

# Print the heritability results
print(results)


#Now, let's calculate the dominance variance. 
#Initially, I attempted to use the same model for extraction, but it proved challenging to obtain the variance directly. 
#Therefore, I decided to calculate it separately using the script below


# Load the necessary library for mixed models
library(sommer)

# Function to calculate dominance variance for a given trait
# The function takes in a trait name, the phenotypic data, and the dominance GRM (D).
calculate_dominance_variance <- function(trait, data, D) {
  # Fit the mixed model for the specified trait, with dominance effect using the GRM (D$D)
  model <- mmer(fixed = as.formula(paste(trait, "~ 1")),  # Fixed effect for the trait
                random = ~ vsr(geno, Gu = D$D),           # Random effect for dominance using the GRM
                rcov = ~ units,                           # Residual variance
                data = data)                              # The phenotypic data
  
  # Extract variance components from the fitted model
  varcomp <- summary(model)$varcomp
  
  # Extract dominance genetic variance (sigma_D) and residual variance (sigma_e) from the model
  sigma_D <- varcomp[paste0("u:geno.", trait, "-", trait), "VarComp"]  # Dominance variance
  sigma_e <- varcomp[paste0("units.", trait, "-", trait), "VarComp"]   # Residual variance
  
  # Return the trait name, dominance variance, and residual variance as a named vector
  return(c(trait = trait, dominance_variance = sigma_D, residual_variance = sigma_e))
}

# Create an empty data frame to store the dominance variance results
dominance_results <- data.frame(trait = character(),              # Column for trait names
                                dominance_variance = numeric(),   # Column for dominance variance values
                                residual_variance = numeric(),    # Column for residual variance values
                                stringsAsFactors = FALSE)

# List of all trait names in the phenotypic data (excluding the first column 'geno')
trait_names <- colnames(pheno)[2:21]

# Loop through all traits in the phenotypic data
for (trait in trait_names) {
  # Call the function for each trait to calculate dominance and residual variances
  result <- calculate_dominance_variance(trait, pheno, D)
  # Convert the result to a data frame and append it to the dominance_results data frame
  dominance_results <- rbind(dominance_results, as.data.frame(t(result)))
}

# Convert the columns for dominance variance and residual variance to numeric format
dominance_results$dominance_variance <- as.numeric(as.character(dominance_results$dominance_variance))
dominance_results$residual_variance <- as.numeric(as.character(dominance_results$residual_variance))

# Save the final results to a CSV file for later reference or sharing
write.csv(dominance_results, "dominance_variance_results.csv", row.names = FALSE)

# Print the results to check the output
print(dominance_results)












